#!/bin/bash

# AiSystant - Installation Automatique COMPL√àTE
# Ce script installe TOUT : dossiers, d√©pendances, et g√®re les conflits

set -e

echo "üöÄ AiSystant - Installation Automatique Compl√®te"
echo "=========================================================="
echo ""

# Couleurs
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
    exit 1
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_step() {
    echo ""
    echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo ""
}

# ============================================================
# √âTAPE 1 : V√âRIFICATION DES PR√âREQUIS
# ============================================================

print_step "üìã √âTAPE 1/6 : V√©rification des pr√©requis"

if ! command -v docker &> /dev/null; then
    print_error "Docker n'est pas install√©. Installez-le depuis https://docker.com"
fi
print_success "Docker install√© ($(docker --version))"

if ! command -v docker-compose &> /dev/null; then
    print_error "Docker Compose n'est pas install√©"
fi
print_success "Docker Compose install√© ($(docker-compose --version))"

if ! command -v node &> /dev/null; then
    print_warning "Node.js n'est pas install√© (requis pour installation locale)"
    print_warning "L'installation des d√©pendances npm sera saut√©e"
    SKIP_NPM=true
else
    NODE_VERSION=$(node -v | cut -d'v' -f2 | cut -d'.' -f1)
    if [ "$NODE_VERSION" -lt 18 ]; then
        print_warning "Node.js version < 18 d√©tect√©e. Version 18+ recommand√©e."
    fi
    print_success "Node.js install√© ($(node -v))"
    SKIP_NPM=false
fi

# ============================================================
# √âTAPE 2 : CR√âATION DE LA STRUCTURE
# ============================================================

print_step "üìÅ √âTAPE 2/6 : Cr√©ation de la structure de dossiers"

# Backend
print_info "Cr√©ation des dossiers backend..."
mkdir -p backend/src/{api/routes,services/{ai,auth,execution,websocket},middleware,config,types,utils}
mkdir -p backend/logs
print_success "Dossiers backend cr√©√©s"

# Frontend
print_info "Cr√©ation des dossiers frontend..."
mkdir -p frontend/src/{components/{Chat,layout,ui},pages,services,store,types}
mkdir -p frontend/public
print_success "Dossiers frontend cr√©√©s"

# ============================================================
# √âTAPE 3 : CONFIGURATION .ENV
# ============================================================

print_step "üìù √âTAPE 3/6 : Configuration de l'environnement"

if [ -f .env ]; then
    print_warning ".env existe d√©j√†, cr√©ation de .env.backup"
    cp .env .env.backup
fi

cat > .env << 'EOF'
# Database
POSTGRES_USER=aisystant
POSTGRES_PASSWORD=aisystant_password
POSTGRES_DB=aisystant
DATABASE_URL=postgresql://aisystant:aisystant_password@postgres:5432/aisystant

# Redis
REDIS_URL=redis://redis:6379

# Backend
JWT_SECRET=your_super_secret_jwt_key_change_this_in_production
NODE_ENV=development
PORT=3001

# AI
ANTHROPIC_API_KEY=your_anthropic_api_key_here

# Frontend
REACT_APP_API_URL=http://localhost:3001
EOF

print_success ".env cr√©√©"
print_warning "‚ö†Ô∏è  N'oubliez pas de modifier ANTHROPIC_API_KEY dans .env !"

# ============================================================
# √âTAPE 4 : INSTALLATION DES D√âPENDANCES BACKEND
# ============================================================

print_step "üîß √âTAPE 4/6 : Installation des d√©pendances backend"

if [ "$SKIP_NPM" = true ]; then
    print_warning "Node.js non disponible, installation saut√©e"
    print_info "Les d√©pendances seront install√©es dans Docker"
else
    if [ -d "backend" ] && [ -f "backend/package.json" ]; then
        print_info "Installation des d√©pendances backend..."
        cd backend
        
        # Installation standard
        npm install
        
        print_success "D√©pendances backend install√©es"
        cd ..
    else
        print_warning "package.json backend non trouv√©, installation saut√©e"
    fi
fi

# ============================================================
# √âTAPE 5 : INSTALLATION DES D√âPENDANCES FRONTEND
# ============================================================

print_step "üé® √âTAPE 5/6 : Installation des d√©pendances frontend"

if [ "$SKIP_NPM" = true ]; then
    print_warning "Node.js non disponible, installation saut√©e"
    print_info "Les d√©pendances seront install√©es dans Docker"
else
    if [ -d "frontend" ] && [ -f "frontend/package.json" ]; then
        print_info "Installation des d√©pendances frontend..."
        cd frontend
        
        # Nettoyage pour √©viter les conflits
        print_info "Nettoyage des anciennes d√©pendances..."
        rm -rf node_modules package-lock.json
        
        # Installation avec --legacy-peer-deps pour g√©rer le conflit TypeScript
        print_info "Installation avec r√©solution des conflits TypeScript..."
        npm install --legacy-peer-deps
        
        # Installation des d√©pendances suppl√©mentaires
        print_info "Installation de Zustand..."
        npm install zustand --legacy-peer-deps
        
        print_info "Installation d'Axios..."
        npm install axios --legacy-peer-deps
        
        print_info "Installation de Socket.io client..."
        npm install socket.io-client --legacy-peer-deps
        
        print_info "Installation de React Router..."
        npm install react-router-dom --legacy-peer-deps
        
        print_info "Installation des types TypeScript..."
        npm install --save-dev @types/react-router-dom --legacy-peer-deps
        
        print_success "D√©pendances frontend install√©es"
        print_info "Note: Utilis√© --legacy-peer-deps pour r√©soudre le conflit TypeScript 5.x vs react-scripts 5.0.1"
        cd ..
    else
        print_warning "package.json frontend non trouv√©, installation saut√©e"
    fi
fi

# ============================================================
# √âTAPE 6 : BUILD DOCKER
# ============================================================

print_step "üê≥ √âTAPE 6/6 : Construction des images Docker"

print_info "Construction des images Docker (peut prendre 5-10 minutes)..."
print_warning "Cette √©tape peut √™tre longue la premi√®re fois..."

if docker-compose build; then
    print_success "Images Docker construites avec succ√®s"
else
    print_error "Erreur lors de la construction des images Docker"
fi

# ============================================================
# R√âSUM√â ET PROCHAINES √âTAPES
# ============================================================

echo ""
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""
echo -e "${GREEN}üéâ Installation termin√©e avec succ√®s !${NC}"
echo ""
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""
echo -e "${YELLOW}‚ö†Ô∏è  ACTION REQUISE :${NC}"
echo ""
echo "1Ô∏è‚É£  Configurez votre cl√© API Anthropic :"
echo "   nano .env"
echo "   Modifiez : ANTHROPIC_API_KEY=sk-ant-votre-cl√©-ici"
echo ""
echo "2Ô∏è‚É£  (Optionnel) G√©n√©rez un JWT secret s√©curis√© :"
echo "   openssl rand -hex 32"
echo "   Puis copiez-le dans .env (JWT_SECRET=...)"
echo ""
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""
echo -e "${BLUE}üöÄ D√âMARRAGE :${NC}"
echo ""
echo "Option 1 (avec Makefile) :"
echo "   make start"
echo ""
echo "Option 2 (Docker Compose direct) :"
echo "   docker-compose up -d"
echo ""
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""
echo -e "${BLUE}üìä V√âRIFICATION :${NC}"
echo ""
echo "V√©rifier les services :"
echo "   docker-compose ps"
echo ""
echo "Voir les logs :"
echo "   docker-compose logs -f"
echo ""
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""
echo -e "${GREEN}üåê ACC√àS :${NC}"
echo ""
echo "   Frontend : http://localhost:3000"
echo "   Backend  : http://localhost:3001"
echo ""
echo "   Compte par d√©faut :"
echo "   Email    : admin@aisystant.com"
echo "   Password : admin123"
echo ""
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""
echo -e "${BLUE}üìö DOCUMENTATION :${NC}"
echo ""
echo "   Guide complet    : GUIDE_COMPLET.md"
echo "   Troubleshooting  : FIX_BUILD.md"
echo "   Architecture     : ARCHITECTURE_COMPLETE.md"
echo "   Fix TypeScript   : FIX_TYPESCRIPT.md"
echo ""
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""
echo -e "${GREEN}‚ú® Bonne utilisation de AiSystant !${NC}"
echo ""